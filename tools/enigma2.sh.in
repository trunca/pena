#!/bin/sh

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@

# set TASKSETVALUE to start enigma2
if [ -f /proc/stb/info/chipset ]; then
  BOXCHIPSET=$(head /proc/stb/info/chipset)
else
  BOXCHIPSET='unknown'
fi

case "$BOXCHIPSET" in
bcm7356|bcm7362|bcm73625|bcm7252s )
  TASKSETVALUE=2;;
* )
  TASKSETVALUE=1;;
esac

# disable oom killer
# echo 99 >/proc/sys/vm/overcommit_ratio
# echo 2 >/proc/sys/vm/overcommit_memory

# check for /etc/enigma2 folder
if [ ! -d /etc/enigma2 ] ; then
	mkdir -p /etc/enigma2
fi

# workaround for old libssl
if [ -h /usr/lib/libssl.so.0.9.8 ]; then
	echo "Found symlink /usr/lib/libssl.so.0.9.8"
else
	ln -s /usr/lib/libssl.so.1.0.0 /usr/lib/libssl.so.0.9.8
fi

# workaround for old libcrypto
if [ -h /usr/lib/libcrypto.so.0.9.8 ]; then
	echo "Found symlink /usr/lib/libcrypto.so.0.9.8"
else
	ln -s /usr/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.0.9.8
fi

# workaround for corrupt ssl files
if [ ! "$(grep config.misc.firstrun /etc/enigma2/settings)" == "config.misc.firstrun=false" ]; then
	rm -rf /etc/enigma2/cert.pem &
	rm -rf /etc/enigma2/key.pem &
fi

## update NTP time if NTP Time Enabled
#if [ "$(grep config.misc.SyncTimeUsing /etc/enigma2/settings)" == "config.misc.SyncTimeUsing=1" ]; then
#	/usr/sbin/ntpdate -s -u pool.ntp.org &
#fi

# update permissions of autofs config files
#if [ ! -f /etc/auto.network ] ; then
# chmod 640 /etc/auto.network
# chmod 644 /etc/auto.master
# chmod 755 /etc/auto.net
# /etc/init.d/autofs restart
#fi

# remove annoying WebInterface relicts
#if [ -d /usr/lib/enigma2/python/Plugins/Extensions/WebInterface/ ]; then
#	rm -rf /usr/lib/enigma2/python/Plugins/Extensions/WebInterface/
#fi

if [ -x @bindir@/showiframe ]; then
	if [ -f @sysconfdir@/enigma2/backdrop.mvi ]; then
		@bindir@/showiframe @sysconfdir@/enigma2/backdrop.mvi
	elif [ -f @sysconfdir@/enigma2/bootlogo.mvi ]; then
		@bindir@/showiframe @sysconfdir@/enigma2/bootlogo.mvi
	elif [ -f @datadir@/bootlogo.mvi ]; then
		@bindir@/showiframe @datadir@/bootlogo.mvi
	fi
fi

# hook to execute scripts always before enigma2 start
if [ -x @bindir@/enigma2_pre_start.sh ]; then
	@bindir@/enigma2_pre_start.sh
fi

if [ -d /home/root ]; then
	export HOME=/home/root
	cd
fi

# check for sundtek tuner helper lib
if [ -e /opt/lib/libmediaclient.so ]; then
	LIBS="/opt/lib/libmediaclient.so /usr/lib/libopen.so.0.0.0"
else
	LIBS="/usr/lib/libopen.so.0.0.0"
fi

sync

# init script for sysctl is missing, so manually load /etc/sysctl.conf here
sysctl -p

# adjust oom score enigma2
#(sleep 2; echo "enigma2 is the main pvr application... adjust oom score!"; PID=$(pidof enigma2); \
#	[ -e /proc/$PID/oom_score_adj ] && echo "-999" > /proc/$PID/oom_score_adj || echo "-17" > /proc/$PID/oom_adj;) &

if [ "$(grep config.crash.enabledebug /etc/enigma2/settings)" == "config.crash.enabledebug=true" ]; then
	RANDOMIZE1970=''
	time=`date +%Y` ;
	if [ "$time" = 1970 ]; then
		RANDOMIZE1970="$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 5 | tr -d '\n')"
	fi
	if [ "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" != "" -a -d "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" ]; then
		LD_PRELOAD=$LIBS taskset $TASKSETVALUE @bindir@/enigma2 --debug-no-color &> $(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')Enigma2-debug-$(date +%Y%m%d_%H-%M-%S)$RANDOMIZE1970.log
	else
		LD_PRELOAD=$LIBS taskset $TASKSETVALUE @bindir@/enigma2 --debug-no-color &> /home/root/logs/Enigma2-debug-$(date +%Y%m%d_%H-%M-%S)$RANDOMIZE1970.log
	fi
else
	# in case $TERM is "linux" the serial output is activated - discard debug output
	if [ "$TERM" = linux ]; then
		LD_PRELOAD=$LIBS taskset $TASKSETVALUE @bindir@/enigma2 2> /dev/null
	else
		LD_PRELOAD=$LIBS taskset $TASKSETVALUE @bindir@/enigma2
	fi
fi

# enigma2 exit codes:
#
# 1 - halt
# 2 - reboot
# 3 - restart enigma
#
# >128 signal

ret=$?
case $ret in
	1)
		/sbin/halt
		;;
	2)
		/sbin/reboot
		;;
	3)
		;;
	4)
		/sbin/rmmod lcd
		/usr/sbin/fpupgrade --upgrade 2>&1 | tee /home/root/fpupgrade.log
		sleep 1;
		/sbin/rmmod fp
		/sbin/modprobe fp
		/sbin/reboot
		;;
	42)
		# bind the console (when available)
		[ -f /sys/class/vtconsole/vtcon1/bind ] && echo 1 > /sys/class/vtconsole/vtcon1/bind
		opkg upgrade 2>&1 | tee /home/root/ipkgupgrade.log
		/sbin/reboot
		;;
	43)
		echo "    " > /dev/lcd0
		/usr/bin/gigablue_wol
		;;
	*)
		;;
esac
